"use client"

import type React from "react"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Textarea } from "@/components/ui/textarea"
import { Separator } from "@/components/ui/separator"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Download, FileText, File, Globe, Eye, Loader2, CheckCircle, AlertCircle } from "lucide-react"
import { exportService, type ExportOptions, type ExportResult } from "@/lib/export-service"
import { useLanguage } from "@/lib/language-context"

interface ExportDialogProps {
  title: string
  content: string
  templateType?: string
  metadata?: ExportOptions["metadata"]
  children: React.ReactNode
}

export function ExportDialog({ title, content, templateType, metadata, children }: ExportDialogProps) {
  const [isOpen, setIsOpen] = useState(false)
  const [isExporting, setIsExporting] = useState(false)
  const [exportProgress, setExportProgress] = useState(0)
  const [exportResult, setExportResult] = useState<ExportResult | null>(null)
  const [previewContent, setPreviewContent] = useState("")
  const { t } = useLanguage()

  const [exportOptions, setExportOptions] = useState<ExportOptions>({
    format: "pdf",
    title,
    content,
    metadata: {
      author: "Legal Professional",
      department: "Legal Department",
      date: new Date(),
      templateType,
      ...metadata,
    },
    styling: {
      fontSize: 12,
      fontFamily: "Arial",
      margins: { top: 1, right: 1, bottom: 1, left: 1 },
      header: "",
      footer: "Generated by LegalDoc AI",
    },
  })

  const formatOptions = [
    { value: "pdf", label: "PDF Document", icon: FileText, description: "Portable Document Format" },
    { value: "docx", label: "Word Document", icon: File, description: "Microsoft Word format" },
    { value: "html", label: "HTML Document", icon: Globe, description: "Web page format" },
    { value: "txt", label: "Plain Text", icon: FileText, description: "Simple text file" },
  ]

  const handleExport = async () => {
    setIsExporting(true)
    setExportProgress(0)
    setExportResult(null)

    // Simulate progress
    const progressInterval = setInterval(() => {
      setExportProgress((prev) => {
        if (prev >= 90) {
          clearInterval(progressInterval)
          return 90
        }
        return prev + 10
      })
    }, 200)

    try {
      const result = await exportService.exportDocument(exportOptions)
      setExportResult(result)
      setExportProgress(100)

      if (result.success) {
        // Auto-close dialog after successful export
        setTimeout(() => {
          setIsOpen(false)
          setExportProgress(0)
          setExportResult(null)
        }, 2000)
      }
    } catch (error) {
      setExportResult({
        success: false,
        filename: "",
        error: error instanceof Error ? error.message : "Export failed",
      })
    } finally {
      setIsExporting(false)
      clearInterval(progressInterval)
    }
  }

  const handlePreview = () => {
    const preview = exportService.getExportPreview(exportOptions)
    setPreviewContent(preview)
  }

  const updateExportOptions = (updates: Partial<ExportOptions>) => {
    setExportOptions((prev) => ({
      ...prev,
      ...updates,
      metadata: { ...prev.metadata, ...updates.metadata },
      styling: { ...prev.styling, ...updates.styling },
    }))
  }

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>{children}</DialogTrigger>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Download className="h-5 w-5" />
            Export Document
          </DialogTitle>
          <DialogDescription>
            Configure export settings and download your document in the desired format
          </DialogDescription>
        </DialogHeader>

        <Tabs defaultValue="format" className="w-full">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="format">Format</TabsTrigger>
            <TabsTrigger value="metadata">Metadata</TabsTrigger>
            <TabsTrigger value="styling">Styling</TabsTrigger>
            <TabsTrigger value="preview">Preview</TabsTrigger>
          </TabsList>

          <TabsContent value="format" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Export Format</CardTitle>
                <CardDescription>Choose the format for your exported document</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-2 gap-4">
                  {formatOptions.map((format) => (
                    <Card
                      key={format.value}
                      className={`cursor-pointer transition-colors ${
                        exportOptions.format === format.value
                          ? "border-primary bg-primary/5"
                          : "hover:border-primary/50"
                      }`}
                      onClick={() => updateExportOptions({ format: format.value as ExportOptions["format"] })}
                    >
                      <CardContent className="p-4">
                        <div className="flex items-center gap-3">
                          <format.icon className="h-8 w-8 text-primary" />
                          <div>
                            <h3 className="font-medium">{format.label}</h3>
                            <p className="text-sm text-muted-foreground">{format.description}</p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="metadata" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Document Metadata</CardTitle>
                <CardDescription>Add information about the document</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="author">Author</Label>
                    <Input
                      id="author"
                      value={exportOptions.metadata?.author || ""}
                      onChange={(e) =>
                        updateExportOptions({
                          metadata: { author: e.target.value },
                        })
                      }
                      placeholder="Document author"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="department">Department</Label>
                    <Input
                      id="department"
                      value={exportOptions.metadata?.department || ""}
                      onChange={(e) =>
                        updateExportOptions({
                          metadata: { department: e.target.value },
                        })
                      }
                      placeholder="Department or organization"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="caseNumber">Case Number</Label>
                    <Input
                      id="caseNumber"
                      value={exportOptions.metadata?.caseNumber || ""}
                      onChange={(e) =>
                        updateExportOptions({
                          metadata: { caseNumber: e.target.value },
                        })
                      }
                      placeholder="Case or reference number"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="templateType">Template Type</Label>
                    <Select
                      value={exportOptions.metadata?.templateType || ""}
                      onValueChange={(value) =>
                        updateExportOptions({
                          metadata: { templateType: value },
                        })
                      }
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select template type" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="fir">FIR</SelectItem>
                        <SelectItem value="charge-sheet">Charge Sheet</SelectItem>
                        <SelectItem value="investigation-report">Investigation Report</SelectItem>
                        <SelectItem value="other">Other</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="styling" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Document Styling</CardTitle>
                <CardDescription>Customize the appearance of your exported document</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="fontSize">Font Size</Label>
                    <Select
                      value={exportOptions.styling?.fontSize?.toString() || "12"}
                      onValueChange={(value) =>
                        updateExportOptions({
                          styling: { fontSize: Number.parseInt(value) },
                        })
                      }
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="10">10pt</SelectItem>
                        <SelectItem value="11">11pt</SelectItem>
                        <SelectItem value="12">12pt</SelectItem>
                        <SelectItem value="14">14pt</SelectItem>
                        <SelectItem value="16">16pt</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="fontFamily">Font Family</Label>
                    <Select
                      value={exportOptions.styling?.fontFamily || "Arial"}
                      onValueChange={(value) =>
                        updateExportOptions({
                          styling: { fontFamily: value },
                        })
                      }
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="Arial">Arial</SelectItem>
                        <SelectItem value="Times New Roman">Times New Roman</SelectItem>
                        <SelectItem value="Calibri">Calibri</SelectItem>
                        <SelectItem value="Georgia">Georgia</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <Separator />

                <div className="space-y-2">
                  <Label>Page Margins (inches)</Label>
                  <div className="grid grid-cols-4 gap-2">
                    <div>
                      <Label htmlFor="marginTop" className="text-xs">
                        Top
                      </Label>
                      <Input
                        id="marginTop"
                        type="number"
                        step="0.1"
                        min="0.5"
                        max="2"
                        value={exportOptions.styling?.margins?.top || 1}
                        onChange={(e) =>
                          updateExportOptions({
                            styling: {
                              margins: {
                                ...exportOptions.styling?.margins,
                                top: Number.parseFloat(e.target.value),
                              },
                            },
                          })
                        }
                      />
                    </div>
                    <div>
                      <Label htmlFor="marginRight" className="text-xs">
                        Right
                      </Label>
                      <Input
                        id="marginRight"
                        type="number"
                        step="0.1"
                        min="0.5"
                        max="2"
                        value={exportOptions.styling?.margins?.right || 1}
                        onChange={(e) =>
                          updateExportOptions({
                            styling: {
                              margins: {
                                ...exportOptions.styling?.margins,
                                right: Number.parseFloat(e.target.value),
                              },
                            },
                          })
                        }
                      />
                    </div>
                    <div>
                      <Label htmlFor="marginBottom" className="text-xs">
                        Bottom
                      </Label>
                      <Input
                        id="marginBottom"
                        type="number"
                        step="0.1"
                        min="0.5"
                        max="2"
                        value={exportOptions.styling?.margins?.bottom || 1}
                        onChange={(e) =>
                          updateExportOptions({
                            styling: {
                              margins: {
                                ...exportOptions.styling?.margins,
                                bottom: Number.parseFloat(e.target.value),
                              },
                            },
                          })
                        }
                      />
                    </div>
                    <div>
                      <Label htmlFor="marginLeft" className="text-xs">
                        Left
                      </Label>
                      <Input
                        id="marginLeft"
                        type="number"
                        step="0.1"
                        min="0.5"
                        max="2"
                        value={exportOptions.styling?.margins?.left || 1}
                        onChange={(e) =>
                          updateExportOptions({
                            styling: {
                              margins: {
                                ...exportOptions.styling?.margins,
                                left: Number.parseFloat(e.target.value),
                              },
                            },
                          })
                        }
                      />
                    </div>
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="footer">Footer Text</Label>
                  <Textarea
                    id="footer"
                    value={exportOptions.styling?.footer || ""}
                    onChange={(e) =>
                      updateExportOptions({
                        styling: { footer: e.target.value },
                      })
                    }
                    placeholder="Footer text (optional)"
                    rows={2}
                  />
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="preview" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg flex items-center gap-2">
                  <Eye className="h-5 w-5" />
                  Document Preview
                </CardTitle>
                <CardDescription>Preview how your document will look when exported</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <Button onClick={handlePreview} variant="outline">
                    Generate Preview
                  </Button>

                  {previewContent && (
                    <div className="border rounded-lg p-4 max-h-96 overflow-y-auto bg-muted/20">
                      {exportOptions.format === "html" ? (
                        <div dangerouslySetInnerHTML={{ __html: previewContent }} />
                      ) : (
                        <pre className="whitespace-pre-wrap text-sm">{previewContent}</pre>
                      )}
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        <Separator />

        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Badge variant="secondary">{formatOptions.find((f) => f.value === exportOptions.format)?.label}</Badge>
            <span className="text-sm text-muted-foreground">{exportOptions.title}</span>
          </div>

          <div className="flex items-center gap-2">
            <Button variant="outline" onClick={() => setIsOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleExport} disabled={isExporting}>
              {isExporting ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  Exporting...
                </>
              ) : (
                <>
                  <Download className="h-4 w-4 mr-2" />
                  Export
                </>
              )}
            </Button>
          </div>
        </div>

        {/* Export Progress */}
        {isExporting && (
          <div className="space-y-2">
            <div className="flex items-center justify-between text-sm">
              <span>Exporting document...</span>
              <span>{exportProgress}%</span>
            </div>
            <Progress value={exportProgress} className="w-full" />
          </div>
        )}

        {/* Export Result */}
        {exportResult && (
          <div
            className={`p-4 rounded-lg border ${
              exportResult.success
                ? "bg-green-50 border-green-200 text-green-800"
                : "bg-red-50 border-red-200 text-red-800"
            }`}
          >
            <div className="flex items-center gap-2">
              {exportResult.success ? <CheckCircle className="h-5 w-5" /> : <AlertCircle className="h-5 w-5" />}
              <div>
                <p className="font-medium">{exportResult.success ? "Export Successful!" : "Export Failed"}</p>
                <p className="text-sm">
                  {exportResult.success
                    ? `Document "${exportResult.filename}" has been downloaded.`
                    : exportResult.error}
                </p>
              </div>
            </div>
          </div>
        )}
      </DialogContent>
    </Dialog>
  )
}
